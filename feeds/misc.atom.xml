<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Alexey Chernyshov's blog - misc</title><link href="https://alexey-n-chernyshov.github.io/blog/" rel="alternate"></link><link href="https://alexey-n-chernyshov.github.io/blog/feeds/misc.atom.xml" rel="self"></link><id>https://alexey-n-chernyshov.github.io/blog/</id><updated>2017-12-27T12:00:00+03:00</updated><entry><title>Physical recovery with pg_filedump</title><link href="https://alexey-n-chernyshov.github.io/blog/physical-recovery-with-pg_filedump.html" rel="alternate"></link><published>2017-12-27T12:00:00+03:00</published><updated>2017-12-27T12:00:00+03:00</updated><author><name>Alexey Chernyshov</name></author><id>tag:alexey-n-chernyshov.github.io,2017-12-27:/blog/physical-recovery-with-pg_filedump.html</id><summary type="html">&lt;p&gt;New features of pg_filedump for recovery&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Physical recovery with pg_filedump&lt;/h1&gt;
&lt;p&gt;If you can’t start your Postgres database and want to recover latest data from database heap files or want to recover just deleted or updated values, &lt;code&gt;pg_filedump&lt;/code&gt; will help you.&lt;/p&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pg_filedump&lt;/code&gt; is a utility to dump contents of heap/index/control files. Some time ago it was enhanced to be suitable for physical recovery data from database heap files. Also recently there was added an ability to recover TOAST values and skip deleted values to the &lt;code&gt;pg_filedump&lt;/code&gt; to be of full-value recovery utility.&lt;/p&gt;
&lt;h3&gt;Behind the scene&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/current/static/storage-file-layout.html"&gt;Tables in Postgres&lt;/a&gt; are stored in heap files divided into segments which are gigabyte-sized by default. Segments consist of pages (8kb by default) which stores data row by row. If an attribute is too large, the TOAST mechanism takes place. Simply put, it compresses, slices data into chunks and stores them in the external table. When a transaction deletes some data, actually, it is not deleted from the file immediately and can be restored. That’s &lt;a href="http://momjian.us/main/writings/pgsql/mvcc.pdf"&gt;how MVCC works&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="images/pg_heap_file_page.png"&gt;&lt;/p&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Let’s see the facilities of &lt;code&gt;pg_filedump&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;It’s easy to build.
git clone git://git.postgresql.org/git/pg_filedump.git
cd pg_filedump
make
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Example&lt;/h3&gt;
&lt;p&gt;Let’s create test table and populate it with data from psql. I added large text from files with size of couple KB with &lt;code&gt;pg_read_file&lt;/code&gt; to demonstrate TOAST’ed data. Checkpoint at the end flushes data files to the disk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# create table my_table(i int, t timestamp, content text);
# insert into my_table values (1, now(), &amp;#39;some text&amp;#39;);
# insert into my_table values (2, now(), ‘to be deleted’);
# insert into my_table values (3, now(), pg_read_file(&amp;#39;file_to_delete.txt&amp;#39;));
# insert into my_table values (4, now(), pg_read_file(&amp;#39;some_file.txt&amp;#39;));
# checkpoint;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can get relation id in an easy way as (we’ll consider further the more general way to know the heap file name):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;select relfilenode from pg_class where relname = &amp;#39;my_table&amp;#39;;
 relfilenode 
-------------
       16408
(1 row)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can find it by name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /path/to/db/ -type f | grep 16408
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And dump the file. We should pass types of the table with &lt;code&gt;-D&lt;/code&gt; option.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./pg_filedump -D int,timestamp,text /path/to/database/base/12445/16408
*******************************************************************
* PostgreSQL File/Block Formatted Dump Utility - Version 10.0
*
* File: /var/lib/postgresql/9.6/main/base/12445/16408
* Options used: -D int,timestamp,text 
*
* Dump created on: Mon Dec 25 18:38:02 2017
*******************************************************************

Block    0 ********************************************************
&amp;lt;Header&amp;gt; -----
 Block Offset: 0x00000000         Offsets: Lower      40 (0x0028)
 Block: Size 8192  Version    4            Upper    7952 (0x1f10)
 LSN:  logid      0 recoff 0x0157e770      Special  8192 (0x2000)
 Items:    4                      Free Space: 7912
 Checksum: 0x0000  Prune XID: 0x0000027d  Flags: 0x0000 ()
 Length (including item array): 40

&amp;lt;Data&amp;gt; ------ 
 Item   1 -- Length:   50  Offset: 8136 (0x1fc8)  Flags: NORMAL
COPY: 1 2017-12-25 18:31:03.547059  some text
 Item   2 -- Length:   54  Offset: 8080 (0x1f90)  Flags: NORMAL
COPY: 2 2017-12-25 18:31:21.451178  to be deleted
 Item   3 -- Length:   58  Offset: 8016 (0x1f50)  Flags: NORMAL
COPY: 3 2017-12-25 18:32:00.895268  (TOASTED)
 Item   4 -- Length:   58  Offset: 7952 (0x1f10)  Flags: NORMAL
COPY: 4 2017-12-25 18:32:04.745484  (TOASTED)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The data we are interested in is after COPY. Option -o skips deleted data and -t option outputs TOAST’ed values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./pg_filedump -o -D int,timestamp,text /var/lib/postgresql/9.6/main/base/12445/16408 | grep COPY

COPY: 1 2017-12-25 18:31:03.547059  some text
COPY: 4 2017-12-25 18:32:04.745484      very large string
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But what if we don’t know the segment number or the database schema? For example, we cannot start Postgres instance. The Postgres stores all the data about tables in the table named &lt;code&gt;pg_class&lt;/code&gt; with relfilenode id 1259. So, we can get the segment number by the name of our table. Here &lt;code&gt;~&lt;/code&gt; in &lt;code&gt;-D&lt;/code&gt; argument means the rest of the row we do not consider.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./pg_filedump -D name,oid,oid,oid,oid,oid,oid,~ /path/to/database/1259 | grep COPY | grep my_table
COPY: my_table  2200    16410   0   10  0   16408
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where the last number is our segment number 16408. We can obtain schema from the table name &lt;code&gt;pg_attribute&lt;/code&gt; with relfilenode 1249 as well. The third column is an oid of the attribute type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./pg_filedump -ot -D oid,name,oid,int,smallint,~ /var/lib/postgresql/9.6/main/base/12445/1249 | grep 16408
COPY: 16408 i   23  -1  4
COPY: 16408 t   1114    -1  8
COPY: 16408 content 25  -1  -1
COPY: 16408 ctid    27  0   6
COPY: 16408 xmin    28  0   4
COPY: 16408 cmin    29  0   4
COPY: 16408 xmax    28  0   4
COPY: 16408 cmax    29  0   4
COPY: 16408 tableoid    26  0   4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step is to get types by oids which are 23, 25 and 1114.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./pg_filedump -i -D name,~ /path/to/database/1247 | grep -A5 -E &amp;#39;OID: (23|25|1114)&amp;#39;
  XMIN: 1  XMAX: 0  CID|XVAC: 0  OID: 23
  Block Id: 0  linp Index: 8   Attributes: 30   Size: 32
  infomask: 0x0909 (HASNULL|HASOID|XMIN_COMMITTED|XMAX_INVALID) 
  t_bits: [0]: 0xff [1]: 0xff [2]: 0xff [3]: 0x07 

COPY: int4
--
  XMIN: 1  XMAX: 0  CID|XVAC: 0  OID: 25
  Block Id: 0  linp Index: 10   Attributes: 30   Size: 32
  infomask: 0x0909 (HASNULL|HASOID|XMIN_COMMITTED|XMAX_INVALID) 
  t_bits: [0]: 0xff [1]: 0xff [2]: 0xff [3]: 0x07 

COPY: text
--
  XMIN: 1  XMAX: 0  CID|XVAC: 0  OID: 1114
  Block Id: 1  linp Index: 39   Attributes: 30   Size: 32
  infomask: 0x0909 (HASNULL|HASOID|XMIN_COMMITTED|XMAX_INVALID) 
  t_bits: [0]: 0xff [1]: 0xff [2]: 0xff [3]: 0x07 

COPY: timestamp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we know the relfilenode of the table we are looking for and the schema and can easily dump the content of the table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./pg_filedump -D int,timestamp,text /path/to/database/base/16408
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Links&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://wiki.postgresql.org/wiki/Pg_filedump"&gt;Wiki page on pg_filedump&lt;/a&gt;
&lt;a href="https://blog.dbi-services.com/displaying-the-contents-of-a-postgresql-data-file-with-pg_filedump/"&gt;More on pg_filedump. Find it interesting&lt;/a&gt;
&lt;a href="https://afiskon.github.io/static/2017/pg-filedump-pgday2017.pdf"&gt;Slides about pg_filedump on PG Day'17&lt;/a&gt;
&lt;a href="https://habrahabr.ru/company/postgrespro/blog/319770/"&gt;Article in Russian, part 1&lt;/a&gt;
&lt;a href="https://habrahabr.ru/company/postgrespro/blog/323644/"&gt;Article in Russian, part 2&lt;/a&gt;&lt;/p&gt;</content><category term="PostgreSQL"></category></entry><entry><title>Static blog with Pelican on GitHub Pages</title><link href="https://alexey-n-chernyshov.github.io/blog/pelican-blog.html" rel="alternate"></link><published>2017-06-29T10:00:00+03:00</published><updated>2017-06-29T10:00:00+03:00</updated><author><name>Alexey Chernyshov</name></author><id>tag:alexey-n-chernyshov.github.io,2017-06-29:/blog/pelican-blog.html</id><summary type="html">&lt;p&gt;How to create blog with Pelican and deploy it on GitHub Pages&lt;/p&gt;</summary><content type="html">&lt;p&gt;This &lt;a href="http://eax.me/pelican/"&gt;post&lt;/a&gt; and circumstances make me a blogger. Here I
will share my first experience in a creation and deployment of a static blog. I
use &lt;a href="http://docs.getpelican.com/en/stable/#"&gt;Pelican&lt;/a&gt; to generate the site and
&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; to host it.&lt;/p&gt;
&lt;h1&gt;GitHub&lt;/h1&gt;
&lt;p&gt;GitHub distinguishes two [types of GitHub Pages]
(https://help.github.com/articles/user-organization-and-project-pages/):
 &lt;strong&gt;User Pages&lt;/strong&gt; and &lt;strong&gt;Project Pages&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User Page&lt;/strong&gt; provides URL as &lt;code&gt;https://&amp;lt;my-github-account&amp;gt;.github.io&lt;/code&gt; and
requires site files to be on the &lt;code&gt;master&lt;/code&gt; branch at the root. It creates
additional obstacles in a workflow.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project Page&lt;/strong&gt; URL is &lt;code&gt;https://&amp;lt;my-github-account&amp;gt;.github.io/&amp;lt;project&amp;gt;&lt;/code&gt;.
The site can be deployed in separate branch &lt;code&gt;gh-pages&lt;/code&gt; or &lt;code&gt;/docs&lt;/code&gt; directory on
&lt;code&gt;master&lt;/code&gt; branch. So, it is possible to use one repository both for the site
hosting and as a storage for the site generator scripts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, my choice is User Page for my personal page with a link to the blog
and Project Page for the blog. So, I created two repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;my-github-account&amp;gt;.github.io&lt;/code&gt; for [personal page]
(https://github.com/Alexey-N-Chernyshov/Alexey-N-Chernyshov.github.io) and
initialize it with the link to the blog.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Alexey-N-Chernyshov/blog"&gt;blog&lt;/a&gt; and initialize it with
README file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will consider only the second one, the blog. It is time to clone it from
GitHub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone git@github.com:&amp;lt;github-account&amp;gt;/&amp;lt;github-account&amp;gt;.github.io.git
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Pelican&lt;/h1&gt;
&lt;p&gt;Pelican allows to write content in Markdown laguage and build pretty good HTML.
It is easy to use, has a lot of themes and plugins. And it is really easy to
start using it. Pelican is written in Python, thus to create a virtual
environment for the blog project will be a good idea.
&lt;a href="https://github.com/davisp/ghp-import"&gt;ghp-import&lt;/a&gt; is a handy tool that will
help with the blog hosting. Finally, &lt;code&gt;pelican-quickstart&lt;/code&gt; asks a set of
questions and creates a skeleton project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkvirtualenv pelican
$ pip install pelican markdown ghp-import
$ pelican-quickstart
Welcome to pelican-quickstart v3.7.1.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; .
&amp;gt; What will be the title of this web site? My blog
&amp;gt; Who will be the author of this web site? My name
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; en
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; What is your URL prefix? &lt;span class="o"&gt;(&lt;/span&gt;see above example&lt;span class="p"&gt;;&lt;/span&gt; no trailing slash&lt;span class="o"&gt;)&lt;/span&gt; http://&amp;lt;github-account&amp;gt;.github.io/blog
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; How many articles per page &lt;span class="k"&gt;do&lt;/span&gt; you want? &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&amp;gt; What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Is this your personal page &lt;span class="o"&gt;(&lt;/span&gt;username.github.io&lt;span class="o"&gt;)&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
Done. Your new project is available at /path/to/the/blog/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Edit .gitignore and commit changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*.pid
*.pyc
*.swp
output/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;pelican-quickstart&lt;/code&gt; creates two configuration files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; for local development&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishconf.py&lt;/code&gt; for product deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Write a content&lt;/h1&gt;
&lt;p&gt;Ensure you work in virtual environment, if not run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ workon pelican
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is convenient to run development server on &lt;a href="https://localhost:8000"&gt;https://localhost:8000&lt;/a&gt; that
will display changes as you make them. You can start it in the new console to
see the output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that &lt;code&gt;Ctrl+C&lt;/code&gt; will not stop the server, use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ./develop_server.sh stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/content.html"&gt;Pelican stores&lt;/a&gt; all content
in &lt;code&gt;content&lt;/code&gt; directory. There are two types of content:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pages&lt;/strong&gt; for content that do not change very often (e.g., About, Contacts)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;articles&lt;/strong&gt;, or chronological blog posts in our case&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All content can be written in Markdown and should have metadata like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;05&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;
&lt;span class="n"&gt;Authors&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Alexis&lt;/span&gt; &lt;span class="n"&gt;Metaireau&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Conan&lt;/span&gt; &lt;span class="n"&gt;Doyle&lt;/span&gt;
&lt;span class="n"&gt;Summary&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Short&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can start with about page in &lt;code&gt;content/pages/about.md&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;Publishing&lt;/h1&gt;
&lt;p&gt;Once you have added content just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make github
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It will generate HTML, commit it to the &lt;code&gt;gh-pages&lt;/code&gt; branch and pushes to GitHub.&lt;/p&gt;
&lt;h1&gt;Google Analytics&lt;/h1&gt;
&lt;p&gt;Another good idea is to add Google Analytics to your blog. Go to
 &lt;a href="http://www.google.com/analytics/"&gt;http://www.google.com/analytics/&lt;/a&gt; and follow instructions. Add ID as 
&lt;code&gt;US-XXXXXXXX-X&lt;/code&gt; to publishconf.py. Deploy as described above.&lt;/p&gt;
&lt;h1&gt;Comments&lt;/h1&gt;
&lt;p&gt;Comments are provided by &lt;a href="https://disqus.com"&gt;Disqus&lt;/a&gt;. Head to the website and
create an account. Here you should copy website name which is equal to the
string before &lt;code&gt;.disqus&lt;/code&gt; in URL of your account
(i.e. https://alexey-chernyshovs-blog.disqus.com)...&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="{filename}/images/disqus_website_name.png" title="Website name"&gt;&lt;/p&gt;
&lt;p&gt;... and paste to pelicanconf.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DISQUS_SITENAME = &amp;#39;alexey-chernyshovs-blog&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But since Disqus doesn’t recognize the local address, this setting should go
to publishconf.py.&lt;/p&gt;
&lt;h1&gt;Further work&lt;/h1&gt;
&lt;p&gt;Themes will be considered further.&lt;/p&gt;</content><category term="Pelican"></category><category term="blog"></category></entry><entry><title>Qt Creator configuration for PostrgreSQL development</title><link href="https://alexey-n-chernyshov.github.io/blog/qt-creator-configuration-for-postrgresql-development.html" rel="alternate"></link><published>2017-06-25T16:00:00+03:00</published><updated>2017-06-25T16:00:00+03:00</updated><author><name>Alexey Chernyshov</name></author><id>tag:alexey-n-chernyshov.github.io,2017-06-25:/blog/qt-creator-configuration-for-postrgresql-development.html</id><summary type="html">&lt;p&gt;Qt Creator configuration for PostgreSQL development&lt;/p&gt;</summary><content type="html">&lt;p&gt;PostgreSQL code is a lot about of macros, which hard to track. Qt Creator
allows going to macros declaration on Ctrl+Click.&lt;/p&gt;
&lt;p&gt;Initial configuration is extremely simple, just set tab width as 4 symbols.
The PostgreSQL code standard defines tab width as 4 symbols and uses a mix of
tabs and spaces. It is awful. For example, the definition of a pointer is
aligned with 3 spaces:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int     i;
int    *j;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now disallow Qt Creator to substitute tab with whitespaces while edit. Go to
&lt;code&gt;Tools-&amp;gt;Options...-&amp;gt;C++&lt;/code&gt; and create a new settings.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="{filename}/images/qtcreator/qt-cpp-code-style.png" title="C++ code style"&gt;&lt;/p&gt;
&lt;p&gt;Choose &lt;code&gt;mixed&lt;/code&gt; for Tab policy, set Tab width to 4 and choose Align continuation
lines &lt;code&gt;With Regular Indent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="{filename}/images/qtcreator/qt-cpp-tabs.png" title="C++ Tabs"&gt;&lt;/p&gt;
&lt;p&gt;The next step is to import project. Follow
&lt;code&gt;New File or Project-&amp;gt;Import Project-&amp;gt;Import Existing Project&lt;/code&gt;, specify project
name and location, and add to filters &lt;em&gt;.sql, &lt;/em&gt;.sgml, and *.control. Qt Creator
adds project files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Qt Creator files
postgresql.config
postgresql.creator
postgresql.files
postgresql.includes
*.autosave
*.creator.user # Stores per-project user settings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You do not want these files to be committed into repository either excluded with
.gitignore file since they are specific to a particular workflow. Thus, the best
approach is to add these files to &lt;code&gt;.git/info/exclude&lt;/code&gt; file. This file has the
same format as any &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ok, you are ready to work with PostgreSQL.&lt;/p&gt;</content><category term="Qt Creator"></category><category term="PostgreSQL"></category></entry></feed>